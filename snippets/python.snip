snippet snip.ifmain
abbr if __name__ ...
options indent
    if __name__ == '__main__':
        ${1}

snippet snip.oswalk
abbr for...in os.walk(...)
options head
    for root, dirs, files in os.walk(${1:dir}):
        ${2}

snippet snip.arg
abbr argparse.ArgumentParser
options indent
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--prod-db", default='emma', help="Export production DB")
    parser.add_argument("--logdb", action="store_true", help="Export logging DB (only the past day)")
    args = parser.parse_args()

snippet snip.setup
abbr setuptools.setup(...)
options indent
    setuptools.setup(
        name="${1:package-name}",
        version='0.1.0',
        license="MIT",

        author="Ryan Ye",
        author_email="yejianye@gmail.com",
        url="https://github.com/yejianye/$1",

        description="${2:description}",
        long_description=open("README.md").read(),
        keywords=[${3}],
        classifiers=[
                "Environment :: Console",
                "Development Status :: 3 - Alpha",
                "Programming Language :: Python",
                "Programming Language :: Python :: 2.7",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Environment :: Other Environment",
                "Topic :: Utilities",
            ],
        entry_points={
            'console_scripts': [
                '${4:script-name} = $1.$4:script-name}:main',
            ]
        },
        install_requires=[${5}],
        packages=['$1'],
    )

snippet     snip.strftime
abbr        time.strftime(...)
    time.strftime('%Y%m%d', ${1:#:date}.timetuple())

snippet     snip.mktime
abbr        time.mktime(...)       
    time.mktime(${1:dateobj}.timetuple())

snippet     snip.email
abbr        smtp.sendemail...
options     indent
    import smtplib

    sender = 'from@fromdomain.com'
    receivers = ['to@todomain.com']

    message = """From: From Person <from@fromdomain.com>
    To: To Person <to@todomain.com>
    Subject: SMTP e-mail test

    This is a test e-mail message.
    """

    try:
       smtp = smtplib.SMTP('localhost')
       smtp.sendmail(sender, receivers, message)         
    except SMTPException:
       print "Error: unable to send email" 

snippet     snip.shell_command
abbr        def shell_command(command, ...)
options     indent
	import subprocess
	def shell_command(command, capture_stderr=False):
		p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		output = p.stdout.readlines()
		err_output = p.stderr.readlines()
		retcode = p.wait()
		if capture_stderr:
			return retcode, output, err_output,
		else:
			return retcode, output

snippet     snip.logging
abbr        logging.basicConfig(...)
options     indent
    import logging
    logging.basicConfig(filename='${1:filename}', format='%(asctime)s %(message)s', level=logging.INFO)
