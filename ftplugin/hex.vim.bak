let b:filename = bufname("%")
function! HexBalloonExprDWORD()
perl << EOF
    sub addcomma{
        my ($val) = @_;
        $val = reverse($val);
        $val =~ s/(\d\d\d)(?=\d)/$1,/g;
        $val = reverse($val);
        return $val;
    }
    $bufnr1 = int(VIM::Eval('v:beval_bufnr'));
    $buflist = VIM::Eval('tabpagebuflist()');
    @bufs = split /\n/, $buflist;
    @bufs = grep !/$bufnr1/, @bufs;
    $bufnr2 = int($bufs[0]) if scalar(@bufs) == 1;
    $buf1 = (VIM::Buffers($bufnr1))[0];
    $buf2 = (VIM::Buffers($bufnr2))[0] if $bufnr2;
    $buf2 = undef if $buf2 && $buf2->Name() !~ /\.hex/;
    $row = VIM::Eval('v:beval_lnum');
    $col = VIM::Eval('v:beval_col');
    $line1 = $buf1->Get($row); 
    $line1 =~ s/^([0-9a-f]*: *)//;
    $line2 = '';
    if ($buf2) {
        $line2 = $buf2->Get($row); 
        $line2 =~ s/^([0-9a-f]*: *)//;
    }
    $addr = $1;
    $col -= length($addr); 
    if ($col > 0 && $col < 40){
        $addr =~ s/: *//;
        $addr =~ s/^0*//;
        $addr = eval("0x$addr");
        $offset = (int($col / 10));
        $addr += $offset * 4;
        $addr = sprintf("0x%x",$addr);
        $line1 =~ s/  .*$//;
        @data1 = split / /, $line1;
        $dword1_hex = $data1[2 * $offset] . $data1[2 * $offset + 1];
        $dword1_hex =~ s/(..)(..)(..)(..)/0x$4$3$2$1/;
        $dword1_ival= eval($dword1_hex);
        $dword1_fval = unpack("f",pack("i",$dword1_ival));
        if (not $buf2) {
            $dword1_ival = addcomma($dword1_ival);
            VIM::Msg("addr: $addr  val: $dword1_hex/$dword1_ival/$dword1_fval");
            return;
        }
        $line2 =~ s/  .*$//;
        @data2 = split / /, $line2;
        $dword2_hex = $data2[2 * $offset] . $data2[2 * $offset + 1];
        $dword2_hex =~ s/(..)(..)(..)(..)/0x$4$3$2$1/;
        $dword2_ival= eval($dword2_hex);
        $dword2_fval = unpack("f",pack("i",$dword2_ival));
        $diff_ival = $dword1_ival - $dword2_ival;
        $diff_fval = $dword1_fval - $dword2_fval;
        $dword1_ival = addcomma($dword1_ival);
        $dword2_ival = addcomma($dword2_ival);
        $diff_ival = addcomma($diff_ival);
        VIM::Msg("addr: $addr  val: $dword1_hex/$dword1_ival/$dword1_fval  ref: $dword2_hex/$dword2_ival/$dword2_fval  diff: $diff_ival/$diff_fval");
    }
EOF
    return []
endfunction

function! HexBalloonExprWORD()
perl << EOF
    $bufnr1 = int(VIM::Eval('v:beval_bufnr'));
    $buflist = VIM::Eval('tabpagebuflist()');
    @bufs = split /\n/, $buflist;
    @bufs = grep !/$bufnr1/, @bufs;
    $bufnr2 = int($bufs[0]) if scalar(@bufs) == 1;
    $buf1 = (VIM::Buffers($bufnr1))[0];
    $buf2 = (VIM::Buffers($bufnr2))[0] if $bufnr2;
    $buf2 = undef if $buf2 && $buf2->Name() !~ /\.hex/;
    $row = VIM::Eval('v:beval_lnum');
    $col = VIM::Eval('v:beval_col');
    $line1 = $buf1->Get($row); 
    $line1 =~ s/^([0-9a-f]*: *)//;
    $line2 = '';
    if ($buf2) {
        $line2 = $buf2->Get($row); 
        $line2 =~ s/^([0-9a-f]*: *)//;
    }
    $addr = $1;
    $col -= length($addr); 
    if ($col > 0 && $col < 40){
        $addr =~ s/: *//;
        $addr =~ s/^0*//;
        $addr = eval("0x$addr");
        $offset = (int($col / 5));
        $addr += $offset * 2;
        $addr = sprintf("0x%x",$addr);
        $line1 =~ s/  .*$//;
        @data1 = split / /, $line1;
        $dword1_hex = $data1[$offset];
        $dword1_hex =~ s/(..)(..)/0x$2$1/;
        $dword1_ival= eval($dword1_hex);
        if (not $buf2) {
            VIM::Msg("addr: $addr  val: $dword1_hex/$dword1_ival");
            return;
        }
        $line2 =~ s/  .*$//;
        @data2 = split / /, $line2;
        $dword2_hex = $data2[$offset];
        $dword2_hex =~ s/(..)(..)/0x$2$1/;
        $dword2_ival= eval($dword2_hex);
        $diff_ival = $dword1_ival - $dword2_ival;
        VIM::Msg("addr: $addr  val: $dword1_hex/$dword1_ival  ref: $dword2_hex/$dword2_ival  diff: $diff_ival");
    }
EOF
    return []
endfunction

function! ConvertHexToBinary()
    let binary=substitute(b:filename, ".hex$", "", "")
    let cmd = 'silent !/usr/bin/xxd -r '.b:filename.' > '.binary
    exec(cmd)
endfunction

setlocal bexpr=HexBalloonExprDWORD()
setlocal ballooneval
command! -buffer ShowWord :setlocal bexpr=HexBalloonExprWORD()
command! -buffer ShowDword :setlocal bexpr=HexBalloonExprDWORD()

autocmd BufWritePost *.hex call ConvertHexToBinary()
